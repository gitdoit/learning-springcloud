什么是微服务？
    强调的是服务的大小，将单一的服务拆分成独立的单元部署，各个服务之间通过约定的方式进行调用，例如Http接口的形式。
    例如项目中的发短信打电话功能，之前是项目A需要打电话功能，OK，写代码做实现。项目B也需要打电话功能，OK，再重新实现一遍。
    现在如果使用微服务进行拆分，将打电话发短信这些功能独立的拆分出来成为一个单独的微服务运行，这样再面对这种情况可以通过
    Http接口的形式进行调用，这样提高了模块的重用性，以及降低了各个模块的耦合，使之可以独立的部署，而不影响整个项目。

什么是微服务架构？
    微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、互相配合，为用户提供最终价值。
    每个服务运行在其独立的进程中，服务和服务之间采用轻量级的通信机制相互沟通（通常是基于HTTP的Restful API).
    每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。
    另外，应尽量避免统一的、集中的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构

微服务架构的优缺点
    优点
    1、能够独立的开发部署
    2、功能职责单一，方便我们开发理解
    3、提高容错性，单个服务出错不会导致整个项目无法运行。
    4、部分功能拆分成微服务后可以实现重用，避免重复造轮子
    5、有利于技术的迭代升级，新的微服务可以用新的版本而不用顾虑项目整体的兼容性。

    缺点
    1、不利于管理，由于拆分后的微服务众多，需要花费一定精力做管理上的操作
    2、提高了系统设计的复杂性，微服务的动态扩容会产生多个实例，需要考虑幂等性

微服务技术栈
    微服务架构只是一种架构模式，我们要应用到实际的开发中的话需要有对应的落地实现。而这些实现就组成了
    微服务的技术栈。
    1、服务开发              SpringBoot、SpringMVC
    2、服务配置与管理        Netflix的Archaius、阿里的Diamond
    3、服务注册与发现        Eureka、Nacos、Zookeeper
    4、服务调用              Rest、RPC
    5、服务熔断器            Hystrix、Envoy
    6、服务接口调用          Feign(简化客户端调用服务端功能的工具)
    7、消息队列              RocketMq、Kafka
    8、服务配置中心管理      SpringCloudConfig、Nacos
    9、服务路由              SpringCloudGateway(对标Zuul)、Zuul
    10、服务监控             Zabbix、
    11、全链路追踪           Zipkin、Brave
    12、服务部署             Docker、k8s
    13、数据流操作开发包     SpringCloud Stream
    14、事件消息总线         Spring Cloud Bus