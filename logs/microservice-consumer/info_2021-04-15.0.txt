00:01:21.415 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:06:21.423 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:11:21.429 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:16:21.444 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:21:21.454 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:26:21.457 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:31:21.466 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:36:21.472 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:41:21.487 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:46:21.495 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:51:21.495 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
00:56:21.506 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:01:21.508 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:06:21.514 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:11:21.521 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:16:21.523 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:21:21.528 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:26:21.529 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:31:21.531 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
01:36:21.532 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
14:52:31.656 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
14:52:33.048 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
14:52:33.939 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
14:52:34.667 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
14:52:34.678 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
14:52:34.679 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
14:52:34.679 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
14:52:34.896 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
14:52:34.896 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1824 ms
14:52:35.116 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
14:52:35.336 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
14:52:35.356 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
14:52:35.356 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
14:52:35.360 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
14:52:35.361 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
14:52:35.515 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
14:52:37.901 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
14:52:38.018 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
14:52:38.050 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
14:52:39.239 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
14:52:39.239 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
14:52:39.370 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
14:52:39.370 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
14:52:39.563 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
14:52:40.335 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
14:52:40.336 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
14:52:40.336 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
14:52:40.336 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
14:52:40.336 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
14:52:40.336 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
14:52:40.336 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
14:52:40.517 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
14:52:40.519 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
14:52:40.521 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
14:52:40.525 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618469560524 with initial instances count: 2
14:52:40.528 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
14:52:40.529 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618469560529, current=UP, previous=STARTING]
14:52:40.532 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
14:52:40.546 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
14:52:40.578 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
14:52:40.580 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
14:52:40.593 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
14:52:41.761 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 12.137 seconds (JVM running for 13.82)
14:52:42.018 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
14:52:42.020 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
14:52:42.027 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
14:52:42.065 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
14:52:42.067 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@1b587d2c
14:52:43.042 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
14:53:01.379 [http-nio-80-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
14:53:01.379 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
14:53:01.389 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 10 ms
14:53:01.605 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/1000 HTTP/1.1
14:53:01.605 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
14:53:01.639 [hystrix-microservicecloud-dept-1] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
14:53:01.639 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
14:53:01.640 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
14:53:01.642 [hystrix-microservicecloud-dept-1] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
14:53:01.643 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@255ec283
14:53:02.642 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
14:53:02.723 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (1117ms)
14:53:02.723 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
14:53:02.723 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
14:53:02.723 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 06:53:01 GMT
14:53:02.724 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
14:53:02.724 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
14:53:02.725 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:1000
14:53:02.726 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
14:53:12.934 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/1000 HTTP/1.1
14:53:12.934 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
14:53:13.946 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (1012ms)
14:53:13.946 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
14:53:13.946 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
14:53:13.947 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 06:51:45 GMT
14:53:13.947 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
14:53:13.947 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
14:53:13.947 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:1000
14:53:13.947 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
14:53:15.880 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/10 HTTP/1.1
14:53:15.880 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
14:53:15.925 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (43ms)
14:53:15.925 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 12
14:53:15.925 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
14:53:15.925 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 06:53:15 GMT
14:53:15.925 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
14:53:15.925 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
14:53:15.926 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:10
14:53:15.926 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (12-byte body)
14:57:40.348 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
15:02:40.355 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
15:05:56.702 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
15:05:58.130 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
15:05:59.074 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=1352521c-d563-3036-b118-7f8531ecd676
15:05:59.911 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
15:05:59.923 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
15:05:59.924 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
15:05:59.924 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
15:06:00.051 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
15:06:00.052 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1898 ms
15:06:00.292 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
15:06:00.486 [restartedMain] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hystrixController' defined in file [F:\workspace\idea\personal\my-learn\myspringcloud\microservice-consumer\target\classes\org\seefly\microserviceconsumer\controller\HystrixController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.seefly.microservice.provider.api.service.SleepFeignApi': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallback instance of type class org.seefly.microservice.provider.api.service.fallback.SleepFeignApiFallback found for feign client sleep
15:06:00.489 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
15:06:00.501 [restartedMain] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
15:06:00.516 [restartedMain] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hystrixController' defined in file [F:\workspace\idea\personal\my-learn\myspringcloud\microservice-consumer\target\classes\org\seefly\microserviceconsumer\controller\HystrixController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.seefly.microservice.provider.api.service.SleepFeignApi': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallback instance of type class org.seefly.microservice.provider.api.service.fallback.SleepFeignApiFallback found for feign client sleep
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at org.seefly.microserviceconsumer.MicroserviceConsumerApplication.main(MicroserviceConsumerApplication.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.seefly.microservice.provider.api.service.SleepFeignApi': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallback instance of type class org.seefly.microservice.provider.api.service.fallback.SleepFeignApiFallback found for feign client sleep
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:178)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:101)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1817)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getObjectForBeanInstance(AbstractAutowireCapableBeanFactory.java:1266)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1510)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1467)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1250)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 24 common frames omitted
Caused by: java.lang.IllegalStateException: No fallback instance of type class org.seefly.microservice.provider.api.service.fallback.SleepFeignApiFallback found for feign client sleep
	at org.springframework.cloud.openfeign.HystrixTargeter.getFromContext(HystrixTargeter.java:81)
	at org.springframework.cloud.openfeign.HystrixTargeter.targetWithFallback(HystrixTargeter.java:72)
	at org.springframework.cloud.openfeign.HystrixTargeter.target(HystrixTargeter.java:49)
	at org.springframework.cloud.openfeign.FeignClientFactoryBean.loadBalance(FeignClientFactoryBean.java:253)
	at org.springframework.cloud.openfeign.FeignClientFactoryBean.getTarget(FeignClientFactoryBean.java:282)
	at org.springframework.cloud.openfeign.FeignClientFactoryBean.getObject(FeignClientFactoryBean.java:262)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:171)
	... 36 common frames omitted
16:29:55.245 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
16:29:56.697 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
16:29:57.622 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
16:29:58.508 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
16:29:58.523 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
16:29:58.524 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:29:58.524 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
16:29:58.653 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
16:29:58.654 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1932 ms
16:29:58.973 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
16:29:59.204 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:29:59.239 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
16:29:59.239 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
16:29:59.248 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
16:29:59.250 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
16:29:59.442 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
16:30:02.025 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
16:30:02.180 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
16:30:02.228 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
16:30:03.226 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
16:30:03.227 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
16:30:03.396 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
16:30:03.397 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
16:30:03.694 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
16:30:04.453 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
16:30:04.453 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
16:30:04.453 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
16:30:04.453 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
16:30:04.453 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
16:30:04.453 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
16:30:04.454 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
16:30:04.741 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
16:30:04.745 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
16:30:04.747 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
16:30:04.751 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618475404750 with initial instances count: 2
16:30:04.755 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
16:30:04.756 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618475404756, current=UP, previous=STARTING]
16:30:04.760 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
16:30:04.771 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
16:30:04.815 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
16:30:04.816 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
16:30:04.825 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
16:30:05.961 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 12.658 seconds (JVM running for 15.202)
16:30:06.147 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
16:30:06.148 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
16:30:06.155 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
16:30:06.194 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:30:06.196 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[121.36.142.5:8001, 192.168.10.64:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@261d9a68
16:30:07.168 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:30:18.527 [http-nio-80-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:30:18.527 [http-nio-80-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:30:18.540 [http-nio-80-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 13 ms
16:30:18.792 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/10 HTTP/1.1
16:30:18.793 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:30:18.835 [hystrix-microservicecloud-dept-1] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
16:30:18.835 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
16:30:18.836 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
16:30:18.839 [hystrix-microservicecloud-dept-1] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:30:18.839 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[121.36.142.5:8001, 192.168.10.64:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@e3c4818
16:30:18.890 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (96ms)
16:30:18.890 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 12
16:30:18.890 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:30:18.890 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:28:51 GMT
16:30:18.890 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:30:18.890 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:30:18.892 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:10
16:30:18.892 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (12-byte body)
16:30:19.849 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:30:21.217 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/10 HTTP/1.1
16:30:21.217 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:30:21.260 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (42ms)
16:30:21.260 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 12
16:30:21.260 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:30:21.260 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:30:20 GMT
16:30:21.260 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:30:21.260 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:30:21.261 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:10
16:30:21.261 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (12-byte body)
16:30:35.933 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/10 HTTP/1.1
16:30:35.933 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:30:35.953 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (20ms)
16:30:35.954 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 12
16:30:35.954 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:30:35.954 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:29:08 GMT
16:30:35.954 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:30:35.954 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:30:35.954 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:10
16:30:35.954 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (12-byte body)
16:31:01.656 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/-1 HTTP/1.1
16:31:01.656 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:31:01.719 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 500 Server Error (62ms)
16:31:01.719 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] connection: close
16:31:01.719 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: application/json;charset=utf-8
16:31:01.719 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:31:01.719 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] {"timestamp":1618475373851,"status":500,"error":"Internal Server Error","exception":"java.lang.IllegalArgumentException","message":"org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: timeout value is negative","path":"/sleep/for/-1"}
16:31:01.719 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (318-byte body)
16:35:04.468 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
16:36:12.765 [Thread-32] INFO  com.netflix.loadbalancer.PollingServerListUpdater - Shutting down the Executor Pool for PollingServerListUpdater
16:36:12.766 [SpringContextShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application MICRO-CONSUMER with eureka with status DOWN
16:36:12.766 [SpringContextShutdownHook] WARN  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618475772766, current=DOWN, previous=UP]
16:36:12.766 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
16:36:12.769 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
16:36:12.787 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-microservicecloud-dept
16:36:12.792 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
16:36:12.797 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
16:36:12.798 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
16:36:12.802 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
16:36:12.806 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
16:36:12.808 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
16:36:12.831 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - deregister  status: 200
16:36:12.840 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
16:36:20.034 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
16:36:21.451 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
16:36:22.443 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
16:36:23.336 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
16:36:23.351 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
16:36:23.352 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
16:36:23.352 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
16:36:23.485 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
16:36:23.485 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2011 ms
16:36:23.812 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
16:36:23.993 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:36:24.018 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
16:36:24.018 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
16:36:24.024 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
16:36:24.025 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
16:36:24.254 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
16:36:26.740 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
16:36:26.904 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
16:36:26.949 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
16:36:27.838 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
16:36:27.839 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
16:36:27.974 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
16:36:27.974 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
16:36:28.223 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
16:36:28.930 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
16:36:28.931 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
16:36:28.931 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
16:36:28.932 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
16:36:28.932 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
16:36:28.932 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
16:36:28.932 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
16:36:29.173 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
16:36:29.179 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
16:36:29.182 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
16:36:29.188 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618475789187 with initial instances count: 3
16:36:29.193 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
16:36:29.193 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618475789193, current=UP, previous=STARTING]
16:36:29.197 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
16:36:29.212 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
16:36:29.252 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
16:36:29.253 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
16:36:29.259 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
16:36:30.347 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 12.213 seconds (JVM running for 14.411)
16:36:30.536 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
16:36:30.537 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
16:36:30.544 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
16:36:30.582 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:36:30.583 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[121.36.142.5:8001, 192.168.10.64:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@28dafb19
16:36:31.562 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:36:37.056 [http-nio-80-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
16:36:37.057 [http-nio-80-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
16:36:37.069 [http-nio-80-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
16:36:37.106 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/-1 HTTP/1.1
16:36:37.106 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:36:37.141 [http-nio-80-exec-2] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
16:36:37.142 [http-nio-80-exec-2] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
16:36:37.143 [http-nio-80-exec-2] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
16:36:37.145 [http-nio-80-exec-2] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:36:37.146 [http-nio-80-exec-2] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[121.36.142.5:8001, 192.168.10.64:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@5dcd0f57
16:36:37.240 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 500 Server Error (133ms)
16:36:37.240 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] connection: close
16:36:37.240 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: application/json;charset=utf-8
16:36:37.241 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:36:37.241 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] {"timestamp":1618475709370,"status":500,"error":"Internal Server Error","exception":"java.lang.IllegalArgumentException","message":"org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: timeout value is negative","path":"/sleep/for/-1"}
16:36:37.241 [http-nio-80-exec-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (318-byte body)
16:36:37.258 [http-nio-80-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is feign.FeignException$InternalServerError: [500 Server Error] during [GET] to [http://microservicecloud-dept/sleep/for/-1] [SleepFeignApi#sleep(Long)]: [{"timestamp":1618475709370,"status":500,"error":"Internal Server Error","exception":"java.lang.IllegalArgumentException","message":"org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: timeout value is negative","path":"/sleep/for/-1"}]] with root cause
feign.FeignException$InternalServerError: [500 Server Error] during [GET] to [http://microservicecloud-dept/sleep/for/-1] [SleepFeignApi#sleep(Long)]: [{"timestamp":1618475709370,"status":500,"error":"Internal Server Error","exception":"java.lang.IllegalArgumentException","message":"org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: timeout value is negative","path":"/sleep/for/-1"}]
	at feign.FeignException.serverErrorStatus(FeignException.java:231)
	at feign.FeignException.errorStatus(FeignException.java:180)
	at feign.FeignException.errorStatus(FeignException.java:169)
	at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:92)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:156)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:80)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy103.sleep(Unknown Source)
	at org.seefly.microserviceconsumer.controller.HystrixController.sleep(HystrixController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
16:36:38.157 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
16:41:28.948 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
16:46:28.963 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
16:47:36.299 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/1000 HTTP/1.1
16:47:36.300 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:47:37.334 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (1033ms)
16:47:37.335 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
16:47:37.335 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:47:37.335 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:47:35 GMT
16:47:37.335 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:47:37.335 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:47:37.336 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:1000
16:47:37.337 [http-nio-80-exec-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
16:47:41.056 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/1000 HTTP/1.1
16:47:41.057 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:47:42.065 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (1007ms)
16:47:42.065 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
16:47:42.066 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:47:42.066 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:46:13 GMT
16:47:42.066 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:47:42.066 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:47:42.066 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:1000
16:47:42.066 [http-nio-80-exec-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
16:47:44.773 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/1001 HTTP/1.1
16:47:44.773 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:47:45.807 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (1033ms)
16:47:45.807 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
16:47:45.807 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:47:45.807 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:47:44 GMT
16:47:45.808 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:47:45.808 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:47:45.808 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:1001
16:47:45.808 [http-nio-80-exec-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
16:48:03.500 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/1001 HTTP/1.1
16:48:03.500 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:48:04.511 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (1009ms)
16:48:04.511 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
16:48:04.512 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:48:04.512 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:46:35 GMT
16:48:04.512 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:48:04.512 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:48:04.512 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:1001
16:48:04.512 [http-nio-80-exec-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
16:48:08.995 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/3000 HTTP/1.1
16:48:08.995 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
16:48:12.031 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (3034ms)
16:48:12.031 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
16:48:12.031 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
16:48:12.031 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 08:48:08 GMT
16:48:12.031 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
16:48:12.031 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
16:48:12.032 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:3000
16:48:12.032 [http-nio-80-exec-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
16:51:28.967 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
16:56:28.981 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:01:28.988 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:05:44.989 [Thread-35] INFO  com.netflix.loadbalancer.PollingServerListUpdater - Shutting down the Executor Pool for PollingServerListUpdater
17:05:44.989 [SpringContextShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application MICRO-CONSUMER with eureka with status DOWN
17:05:44.990 [SpringContextShutdownHook] WARN  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618477544990, current=DOWN, previous=UP]
17:05:44.990 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:05:44.992 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
17:05:45.010 [SpringContextShutdownHook] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:05:45.010 [SpringContextShutdownHook] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:05:45.015 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:05:45.015 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:05:45.019 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:05:45.020 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:05:45.024 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
17:05:45.038 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:05:45.040 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
17:05:45.065 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - deregister  status: 200
17:05:45.075 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
17:05:53.902 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
17:05:55.984 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
17:05:57.027 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
17:05:57.840 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
17:05:57.852 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
17:05:57.853 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
17:05:57.853 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
17:05:57.980 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
17:05:57.980 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1973 ms
17:05:58.213 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
17:05:58.282 [restartedMain] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deptControllerByFeign' defined in file [F:\workspace\idea\personal\my-learn\myspringcloud\microservice-consumer\target\classes\org\seefly\microserviceconsumer\controller\DeptControllerByFeign.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.seefly.microservice.provider.api.service.DeptFeignApi': FactoryBean threw exception on object creation; nested exception is org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'feign.client-org.springframework.cloud.openfeign.FeignClientProperties': Could not bind properties to 'FeignClientProperties' : prefix=feign.client, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'feign.client.config.defalut.logger-level' to feign.Logger$Level
17:05:58.284 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
17:05:58.297 [restartedMain] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
17:05:58.304 [restartedMain] ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Failed to bind properties under 'feign.client.config.defalut.logger-level' to feign.Logger$Level:

    Property: feign.client.config.defalut.loggerlevel
    Value: info
    Origin: class path resource [application.yml]:31:22
    Reason: failed to convert java.lang.String to feign.Logger$Level

Action:

Update your application's configuration. The following values are valid:

    BASIC
    FULL
    HEADERS
    NONE

17:06:35.085 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
17:06:39.004 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
17:06:40.310 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
17:06:41.270 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
17:06:41.286 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
17:06:41.287 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
17:06:41.287 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
17:06:41.424 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
17:06:41.425 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2372 ms
17:06:41.755 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
17:06:41.835 [restartedMain] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'deptControllerByFeign' defined in file [F:\workspace\idea\personal\my-learn\myspringcloud\microservice-consumer\target\classes\org\seefly\microserviceconsumer\controller\DeptControllerByFeign.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.seefly.microservice.provider.api.service.DeptFeignApi': FactoryBean threw exception on object creation; nested exception is org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'feign.client-org.springframework.cloud.openfeign.FeignClientProperties': Could not bind properties to 'FeignClientProperties' : prefix=feign.client, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'feign.client.config.dev.logger-level' to feign.Logger$Level
17:06:41.839 [restartedMain] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
17:06:41.856 [restartedMain] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
17:06:41.863 [restartedMain] ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Failed to bind properties under 'feign.client.config.dev.logger-level' to feign.Logger$Level:

    Property: feign.client.config.dev.loggerlevel
    Value: debug
    Origin: class path resource [application.yml]:36:22
    Reason: failed to convert java.lang.String to feign.Logger$Level

Action:

Update your application's configuration. The following values are valid:

    BASIC
    FULL
    HEADERS
    NONE

17:07:03.381 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
17:07:04.819 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
17:07:05.751 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
17:07:06.644 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
17:07:06.656 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
17:07:06.657 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
17:07:06.657 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
17:07:06.785 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
17:07:06.785 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1944 ms
17:07:07.044 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
17:07:07.233 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:07:07.259 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:07:07.259 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:07:07.265 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:07:07.265 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:07:07.463 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
17:07:09.968 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
17:07:10.124 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
17:07:10.164 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
17:07:11.023 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
17:07:11.023 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
17:07:11.182 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
17:07:11.182 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
17:07:11.448 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:07:12.253 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
17:07:12.253 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
17:07:12.253 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
17:07:12.253 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
17:07:12.253 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
17:07:12.253 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
17:07:12.253 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
17:07:12.494 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
17:07:12.497 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
17:07:12.501 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
17:07:12.505 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618477632504 with initial instances count: 2
17:07:12.509 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
17:07:12.510 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618477632510, current=UP, previous=STARTING]
17:07:12.514 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:07:12.526 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
17:07:12.567 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
17:07:12.568 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
17:07:12.592 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:07:13.688 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 12.676 seconds (JVM running for 14.842)
17:07:13.888 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:07:13.889 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:07:13.920 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:07:13.954 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:07:13.956 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@8af1bb1
17:07:14.930 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:07:22.824 [http-nio-80-exec-8] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
17:07:22.824 [http-nio-80-exec-8] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
17:07:22.835 [http-nio-80-exec-8] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 11 ms
17:07:22.873 [http-nio-80-exec-8] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/3000 HTTP/1.1
17:07:22.873 [http-nio-80-exec-8] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:07:22.908 [http-nio-80-exec-8] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:07:22.908 [http-nio-80-exec-8] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:07:22.910 [http-nio-80-exec-8] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:07:22.911 [http-nio-80-exec-8] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:07:22.912 [http-nio-80-exec-8] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@29113962
17:07:23.915 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:07:24.046 [http-nio-80-exec-8] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- ERROR SocketTimeoutException: Read timed out (1173ms)
17:07:24.048 [http-nio-80-exec-8] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1593)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:78)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:93)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:56)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:340)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:83)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:110)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:80)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy103.sleep(Unknown Source)
	at org.seefly.microserviceconsumer.controller.HystrixController.sleep(HystrixController.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

17:07:24.048 [http-nio-80-exec-8] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END ERROR
17:07:24.062 [http-nio-80-exec-8] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is feign.RetryableException: Read timed out executing GET http://microservicecloud-dept/sleep/for/3000] with root cause
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1593)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:78)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:93)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:56)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:340)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:83)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:110)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:80)
	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:100)
	at com.sun.proxy.$Proxy103.sleep(Unknown Source)
	at org.seefly.microserviceconsumer.controller.HystrixController.sleep(HystrixController.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
17:08:27.305 [Thread-33] INFO  com.netflix.loadbalancer.PollingServerListUpdater - Shutting down the Executor Pool for PollingServerListUpdater
17:08:27.305 [SpringContextShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application MICRO-CONSUMER with eureka with status DOWN
17:08:27.305 [SpringContextShutdownHook] WARN  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618477707305, current=DOWN, previous=UP]
17:08:27.306 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:08:27.308 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
17:08:27.326 [SpringContextShutdownHook] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:08:27.326 [SpringContextShutdownHook] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:08:27.328 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:08:27.331 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:08:27.331 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:08:27.333 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:08:27.334 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:08:27.337 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
17:08:30.353 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
17:08:30.384 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - deregister  status: 200
17:08:30.392 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
17:08:37.180 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
17:08:38.588 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
17:08:39.557 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
17:08:40.416 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
17:08:40.428 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
17:08:40.429 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
17:08:40.429 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
17:08:40.562 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
17:08:40.563 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1947 ms
17:08:40.857 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
17:08:41.051 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:08:41.081 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:08:41.081 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:08:41.088 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:08:41.088 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:08:41.301 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
17:08:43.839 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
17:08:44.012 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
17:08:44.055 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
17:08:45.005 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
17:08:45.005 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
17:08:45.144 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
17:08:45.144 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
17:08:45.454 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:08:46.305 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
17:08:46.305 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
17:08:46.305 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
17:08:46.305 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
17:08:46.305 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
17:08:46.305 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
17:08:46.305 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
17:08:46.625 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
17:08:46.629 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
17:08:46.632 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
17:08:46.639 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618477726637 with initial instances count: 2
17:08:46.646 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
17:08:46.647 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618477726647, current=UP, previous=STARTING]
17:08:46.651 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:08:46.664 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
17:08:46.702 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
17:08:46.704 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
17:08:46.734 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:08:47.860 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 12.619 seconds (JVM running for 14.6)
17:08:48.076 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:08:48.077 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:08:48.085 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:08:48.121 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:08:48.122 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@3edef013
17:08:49.104 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:08:52.795 [http-nio-80-exec-10] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
17:08:52.796 [http-nio-80-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
17:08:52.808 [http-nio-80-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
17:08:53.070 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/3000 HTTP/1.1
17:08:53.071 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:08:53.107 [hystrix-microservicecloud-dept-1] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:08:53.107 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:08:53.108 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:08:53.110 [hystrix-microservicecloud-dept-1] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:08:53.111 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@1126be25
17:08:54.118 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:08:56.164 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- ERROR SocketTimeoutException: Read timed out (3092ms)
17:08:56.165 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1593)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:78)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:93)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:56)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:340)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:83)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:110)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:80)
	at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:109)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.call(OperatorSubscribeOn.java:100)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:56)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:47)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction.call(HystrixContexSchedulerAction.java:69)
	at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

17:08:56.165 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END ERROR
17:09:08.229 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/3000 HTTP/1.1
17:09:08.230 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:09:11.240 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- ERROR SocketTimeoutException: Read timed out (3010ms)
17:09:11.241 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1593)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:78)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:93)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:56)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:340)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:83)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:110)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:80)
	at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:109)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.call(OperatorSubscribeOn.java:100)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:56)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:47)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction.call(HystrixContexSchedulerAction.java:69)
	at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

17:09:11.241 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END ERROR
17:09:15.088 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/2800 HTTP/1.1
17:09:15.089 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:09:17.927 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (2837ms)
17:09:17.927 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
17:09:17.927 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
17:09:17.927 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 09:09:14 GMT
17:09:17.927 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
17:09:17.928 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
17:09:17.929 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:2800
17:09:17.929 [hystrix-microservicecloud-dept-3] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
17:09:22.073 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/2800 HTTP/1.1
17:09:22.073 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:09:24.881 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (2807ms)
17:09:24.881 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
17:09:24.881 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
17:09:24.881 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 09:07:54 GMT
17:09:24.882 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
17:09:24.882 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
17:09:24.882 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:2800
17:09:24.882 [hystrix-microservicecloud-dept-4] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
17:09:49.267 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/2800 HTTP/1.1
17:09:49.267 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:09:52.075 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (2807ms)
17:09:52.076 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
17:09:52.076 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
17:09:52.076 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 09:08:21 GMT
17:09:52.076 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
17:09:52.076 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
17:09:52.076 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:2800
17:09:52.077 [hystrix-microservicecloud-dept-5] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
17:09:52.413 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/2800 HTTP/1.1
17:09:52.414 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:09:55.254 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (2840ms)
17:09:55.254 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
17:09:55.254 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
17:09:55.254 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 09:09:51 GMT
17:09:55.254 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
17:09:55.255 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
17:09:55.255 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:2800
17:09:55.255 [hystrix-microservicecloud-dept-6] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
17:13:17.199 [Thread-36] INFO  com.netflix.loadbalancer.PollingServerListUpdater - Shutting down the Executor Pool for PollingServerListUpdater
17:13:17.222 [SpringContextShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application MICRO-CONSUMER with eureka with status DOWN
17:13:17.222 [SpringContextShutdownHook] WARN  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618477997222, current=DOWN, previous=UP]
17:13:17.224 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:13:17.233 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
17:13:17.245 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:13:17.247 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:13:17.250 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:13:17.251 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:13:17.254 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
17:13:17.257 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:13:17.259 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
17:13:17.287 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - deregister  status: 200
17:13:17.297 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
17:13:24.535 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
17:13:26.039 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
17:13:27.054 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
17:13:27.917 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
17:13:27.930 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
17:13:27.931 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
17:13:27.931 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
17:13:28.060 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
17:13:28.060 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1989 ms
17:13:28.323 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
17:13:28.514 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:13:28.539 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:13:28.539 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:13:28.544 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:13:28.544 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:13:28.760 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
17:13:31.166 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
17:13:31.321 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
17:13:31.380 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
17:13:32.255 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
17:13:32.255 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
17:13:32.392 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
17:13:32.393 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
17:13:32.634 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:13:33.346 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
17:13:33.346 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
17:13:33.346 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
17:13:33.346 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
17:13:33.346 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
17:13:33.346 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
17:13:33.346 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
17:13:33.570 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
17:13:33.573 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
17:13:33.577 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
17:13:33.583 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618478013581 with initial instances count: 2
17:13:33.587 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
17:13:33.588 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618478013588, current=UP, previous=STARTING]
17:13:33.592 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:13:33.607 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
17:13:33.659 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
17:13:33.660 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
17:13:33.675 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:13:34.756 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 12.389 seconds (JVM running for 14.405)
17:13:35.070 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:13:35.071 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:13:35.080 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:13:35.121 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:13:35.123 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@c930bc7
17:13:36.094 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:13:42.173 [http-nio-80-exec-3] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
17:13:42.173 [http-nio-80-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
17:13:42.185 [http-nio-80-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
17:13:42.445 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/2800 HTTP/1.1
17:13:42.445 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:13:42.482 [hystrix-microservicecloud-dept-1] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:13:42.483 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:13:42.484 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:13:42.486 [hystrix-microservicecloud-dept-1] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:13:42.487 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@6c5a4cf8
17:13:43.487 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:13:45.342 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (2897ms)
17:13:45.343 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
17:13:45.343 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
17:13:45.343 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 09:13:41 GMT
17:13:45.343 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
17:13:45.343 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
17:13:45.345 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:2800
17:13:45.345 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
17:13:46.199 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/2800 HTTP/1.1
17:13:46.199 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:13:49.008 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (2808ms)
17:13:49.008 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
17:13:49.008 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
17:13:49.008 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 09:12:18 GMT
17:13:49.013 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
17:13:49.014 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
17:13:49.014 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:2800
17:13:49.014 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
17:18:33.356 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:23:33.369 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:25:04.322 [Thread-39] INFO  com.netflix.loadbalancer.PollingServerListUpdater - Shutting down the Executor Pool for PollingServerListUpdater
17:25:04.323 [SpringContextShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application MICRO-CONSUMER with eureka with status DOWN
17:25:04.323 [SpringContextShutdownHook] WARN  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618478704323, current=DOWN, previous=UP]
17:25:04.324 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:25:04.327 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
17:25:04.341 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:25:04.344 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:25:04.346 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:25:04.347 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:25:04.349 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:25:04.351 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
17:25:07.360 [DiscoveryClient-0] WARN  com.netflix.discovery.TimedSupervisorTask - task supervisor shutting down, can't accept the task
17:25:07.360 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
17:25:07.392 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - deregister  status: 200
17:25:07.401 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
17:25:16.873 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
17:25:18.336 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
17:25:19.294 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
17:25:20.150 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
17:25:20.162 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
17:25:20.162 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
17:25:20.163 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
17:25:20.287 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
17:25:20.287 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1925 ms
17:25:20.530 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
17:25:20.718 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:25:20.744 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:25:20.744 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:25:20.749 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:25:20.750 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:25:20.933 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
17:25:23.295 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
17:25:23.453 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
17:25:23.499 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
17:25:24.385 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
17:25:24.385 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
17:25:24.526 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
17:25:24.526 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
17:25:24.770 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:25:25.521 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
17:25:25.522 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
17:25:25.522 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
17:25:25.522 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
17:25:25.522 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
17:25:25.522 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
17:25:25.522 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
17:25:25.754 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
17:25:25.757 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
17:25:25.759 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
17:25:25.765 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618478725764 with initial instances count: 3
17:25:25.769 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
17:25:25.769 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618478725769, current=UP, previous=STARTING]
17:25:25.772 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:25:25.785 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
17:25:25.825 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
17:25:25.826 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
17:25:25.844 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:25:26.979 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 12.188 seconds (JVM running for 14.32)
17:25:27.171 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:25:27.172 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:25:27.179 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:25:27.216 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:25:27.217 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@72934d6c
17:25:28.194 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:25:41.543 [http-nio-80-exec-2] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
17:25:41.543 [http-nio-80-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
17:25:41.555 [http-nio-80-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
17:25:41.817 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/2800 HTTP/1.1
17:25:41.818 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:25:41.854 [hystrix-microservicecloud-dept-1] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:25:41.855 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:25:41.856 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:25:41.858 [hystrix-microservicecloud-dept-1] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:25:41.859 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@5fcd9155
17:25:42.869 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:25:44.713 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- HTTP/1.1 200 OK (2896ms)
17:25:44.714 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-length: 14
17:25:44.714 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] content-type: text/plain;charset=utf-8
17:25:44.714 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] date: Thu, 15 Apr 2021 09:25:41 GMT
17:25:44.714 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] x-application-context: microservicecloud-dept:8001
17:25:44.714 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 
17:25:44.716 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] 休眠了:2800
17:25:44.717 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END HTTP (14-byte body)
17:30:25.533 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:33:28.955 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/4000 HTTP/1.1
17:33:28.955 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:33:31.966 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- ERROR SocketTimeoutException: Read timed out (3011ms)
17:33:31.968 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1593)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:78)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:93)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:56)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:340)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:83)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:110)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:80)
	at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:109)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.call(OperatorSubscribeOn.java:100)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:56)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:47)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction.call(HystrixContexSchedulerAction.java:69)
	at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

17:33:31.968 [hystrix-microservicecloud-dept-2] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END ERROR
17:34:27.658 [Thread-34] INFO  com.netflix.loadbalancer.PollingServerListUpdater - Shutting down the Executor Pool for PollingServerListUpdater
17:34:27.659 [SpringContextShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application MICRO-CONSUMER with eureka with status DOWN
17:34:27.659 [SpringContextShutdownHook] WARN  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618479267659, current=DOWN, previous=UP]
17:34:27.660 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:34:27.664 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
17:34:27.674 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:34:27.678 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:34:27.682 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:34:27.683 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
17:34:27.686 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
17:34:27.691 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:34:27.693 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
17:34:27.724 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - deregister  status: 200
17:34:27.733 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
17:34:34.620 [restartedMain] INFO  org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
17:34:36.180 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - No active profile set, falling back to default profiles: default
17:34:37.106 [restartedMain] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id=72f3ef62-8097-3e00-b6df-0b4f9616ce34
17:34:37.960 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 80 (http)
17:34:37.971 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
17:34:37.972 [restartedMain] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
17:34:37.972 [restartedMain] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.29]
17:34:38.097 [restartedMain] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
17:34:38.098 [restartedMain] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1891 ms
17:34:38.335 [restartedMain] INFO  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
17:34:38.554 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:34:38.581 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:34:38.581 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:34:38.587 [restartedMain] WARN  com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
17:34:38.587 [restartedMain] INFO  com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
17:34:38.778 [restartedMain] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
17:34:41.909 [restartedMain] WARN  org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
17:34:42.093 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
17:34:42.157 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
17:34:43.356 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
17:34:43.357 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
17:34:43.492 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
17:34:43.492 [restartedMain] INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
17:34:43.820 [restartedMain] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:34:44.555 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
17:34:44.555 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
17:34:44.556 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
17:34:44.556 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
17:34:44.556 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
17:34:44.556 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
17:34:44.556 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
17:34:44.783 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
17:34:44.786 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
17:34:44.789 [restartedMain] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
17:34:44.794 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1618479284793 with initial instances count: 2
17:34:44.798 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application MICRO-CONSUMER with eureka with status UP
17:34:44.799 [restartedMain] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618479284799, current=UP, previous=STARTING]
17:34:44.802 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
17:34:44.816 [restartedMain] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
17:34:44.854 [restartedMain] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 80 (http) with context path ''
17:34:44.855 [restartedMain] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 80
17:34:44.883 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
17:34:45.941 [restartedMain] INFO  org.seefly.microserviceconsumer.MicroserviceConsumerApplication - Started MicroserviceConsumerApplication in 13.284 seconds (JVM running for 15.276)
17:34:46.115 [restartedMain] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
17:34:46.116 [restartedMain] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: MICROSERVICECLOUD-DEPT instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:34:46.124 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:34:46.185 [restartedMain] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:34:46.187 [restartedMain] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client MICROSERVICECLOUD-DEPT initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=MICROSERVICECLOUD-DEPT,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@6ff374cb
17:34:47.136 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:34:55.031 [http-nio-80-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
17:34:55.031 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
17:34:55.044 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 12 ms
17:34:55.319 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> GET http://microservicecloud-dept/sleep/for/4000 HTTP/1.1
17:34:55.319 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] ---> END HTTP (0-byte body)
17:34:55.354 [hystrix-microservicecloud-dept-1] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook installed for: NFLoadBalancer-PingTimer-microservicecloud-dept
17:34:55.354 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.BaseLoadBalancer - Client: microservicecloud-dept instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
17:34:55.355 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - Using serverListUpdater PollingServerListUpdater
17:34:55.357 [hystrix-microservicecloud-dept-1] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:34:55.358 [hystrix-microservicecloud-dept-1] INFO  com.netflix.loadbalancer.DynamicServerListLoadBalancer - DynamicServerListLoadBalancer for client microservicecloud-dept initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=microservicecloud-dept,current list of Servers=[192.168.10.64:8001, 121.36.142.5:8001],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:2;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.10.64:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
, [Server:121.36.142.5:8001;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@66f4764d
17:34:56.368 [PollingServerListUpdater-0] INFO  org.seefly.microserviceconsumer.rule.MyRoundRibbonRule - 负载均,当前是否家里的环境[false]
17:34:58.341 [http-nio-80-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is com.netflix.hystrix.exception.HystrixRuntimeException: SleepFeignApi#sleep(Long) timed-out and fallback disabled.] with root cause
java.util.concurrent.TimeoutException: null
	at com.netflix.hystrix.AbstractCommand.handleTimeoutViaFallback(AbstractCommand.java:997)
	at com.netflix.hystrix.AbstractCommand.access$500(AbstractCommand.java:60)
	at com.netflix.hystrix.AbstractCommand$12.call(AbstractCommand.java:609)
	at com.netflix.hystrix.AbstractCommand$12.call(AbstractCommand.java:601)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:140)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$1.run(AbstractCommand.java:1142)
	at com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable$1.call(HystrixContextRunnable.java:41)
	at com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable$1.call(HystrixContextRunnable.java:37)
	at com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable.run(HystrixContextRunnable.java:57)
	at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$2.tick(AbstractCommand.java:1159)
	at com.netflix.hystrix.util.HystrixTimer$1.run(HystrixTimer.java:99)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:308)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
17:34:58.397 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- ERROR SocketTimeoutException: Read timed out (3078ms)
17:34:58.398 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1593)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:78)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:93)
	at org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:56)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:443)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:340)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:83)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:110)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:80)
	at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:109)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorSubscribeOn$SubscribeOnSubscriber.call(OperatorSubscribeOn.java:100)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:56)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:47)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction.call(HystrixContexSchedulerAction.java:69)
	at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

17:34:58.398 [hystrix-microservicecloud-dept-1] DEBUG org.seefly.microservice.provider.api.service.SleepFeignApi - [SleepFeignApi#sleep] <--- END ERROR
17:39:44.569 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:44:44.579 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:49:44.600 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:54:44.614 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
17:59:44.624 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
18:04:44.638 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
18:09:44.640 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
18:14:44.645 [AsyncResolver-bootstrap-executor-0] INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
18:19:20.383 [Thread-34] INFO  com.netflix.loadbalancer.PollingServerListUpdater - Shutting down the Executor Pool for PollingServerListUpdater
18:19:20.386 [SpringContextShutdownHook] INFO  org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Unregistering application MICRO-CONSUMER with eureka with status DOWN
18:19:20.387 [SpringContextShutdownHook] WARN  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1618481960387, current=DOWN, previous=UP]
18:19:20.387 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80: registering service...
18:19:20.393 [SpringContextShutdownHook] INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
18:19:20.409 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-microservicecloud-dept
18:19:20.409 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
18:19:20.413 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Shutdown hook removed for: NFLoadBalancer-PingTimer-MICROSERVICECLOUD-DEPT
18:19:20.413 [SpringContextShutdownHook] INFO  com.netflix.util.concurrent.ShutdownEnabledTimer - Exception caught (might be ok if at shutdown)
java.lang.IllegalStateException: Shutdown in progress
	at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82)
	at java.lang.Runtime.removeShutdownHook(Runtime.java:239)
	at com.netflix.util.concurrent.ShutdownEnabledTimer.cancel(ShutdownEnabledTimer.java:70)
	at com.netflix.loadbalancer.BaseLoadBalancer.cancelPingTask(BaseLoadBalancer.java:632)
	at com.netflix.loadbalancer.BaseLoadBalancer.shutdown(BaseLoadBalancer.java:883)
	at com.netflix.loadbalancer.DynamicServerListLoadBalancer.shutdown(DynamicServerListLoadBalancer.java:285)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:339)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:92)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
18:19:20.419 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
18:19:20.419 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - registration status: 204
18:19:23.430 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
18:19:23.461 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_MICRO-CONSUMER/DESKTOP-J8HB6E0:micro-consumer:80 - deregister  status: 200
18:19:23.473 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
